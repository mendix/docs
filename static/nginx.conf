# Copy from https://github.com/cloudfoundry/staticfile-buildpack/blob/master/conf/nginx.conf, making sure Jekyll urls are served correctly
worker_processes 1;
daemon off;

error_log <%= ENV["APP_ROOT"] %>/nginx/logs/error.log;
events { worker_connections 1024; }

http {
  charset utf-8;
  log_format cloudfoundry '$http_x_forwarded_for - $http_referer - [$time_local] "$request" $status $body_bytes_sent';
  access_log <%= ENV["APP_ROOT"] %>/nginx/logs/access.log cloudfoundry;
  default_type application/octet-stream;
  include mime.types;
  sendfile on;

  rewrite_log on;

  gzip on;
  gzip_disable "msie6";
  gzip_comp_level 6;
  gzip_min_length 1100;
  gzip_buffers 16 8k;
  gzip_proxied any;
  gunzip on;
  gzip_static always;
  gzip_types text/plain text/css text/js text/xml text/javascript application/javascript application/x-javascript application/json application/xml application/xml+rss;

  tcp_nopush on;
  keepalive_timeout 30;
  port_in_redirect off; # Ensure that redirects don't include the internal container PORT - <%= ENV["PORT"] %>
  server_tokens off;

  map_hash_bucket_size 256;

  # Mappings for indexes
  map $request_uri $index_uri {
    include <%= ENV["APP_ROOT"] %>/public/mappings/indexes.map;
  }

  # Mappings for redirects, generated by `gulp write:mappings` from _assets folder
  map $request_uri $new_uri {
    include <%= ENV["APP_ROOT"] %>/public/mappings/redirect.map;
  }

  # Mappings for assets, generated by 'gulp write:assetsmappings'
  map $request_uri $asset_uri {
    include <%= ENV["APP_ROOT"] %>/public/mappings/assets.map;
  }

  server {
    listen <%= ENV["PORT"] %>;
    server_name localhost;
    root <%= ENV["APP_ROOT"] %>/public;

    <% if ENV["FORCE_HTTPS"] %>
      if ($http_x_forwarded_proto != "https") {
        return 301 https://$host$request_uri;
      }
    <% end %>

    # Index redirect
    if ($index_uri) {
      return 301 https://$host$index_uri;
    }

    # Redirects
    if ($new_uri) {
      return 301 https://$host$new_uri;
    }

    # Assets redirect
    if ($asset_uri) {
      return 301 https://$host$asset_uri;
    }

    # LATEST REDIRECT. IS A 301
    location ~ ^/refguide7/ {
      rewrite ^/refguide7/(.*)$ https://$host/refguide/$1 redirect;
    }

    location ~ ^/howto7/ {
      rewrite ^/howto7/(.*)$ https://$host/howto/$1 redirect;
    }

    index index.html index.htm Default.htm;
    error_page 404 /404.html;

    location = /404.html {
      internal;
    }

    location ~ \.html$ {
      rewrite ^(.*)\.html$ https://$host$1 permanent;
    }

    # Moved old mxsupport links to /support
    location ~ ^/mxsupport {
      rewrite ^/mxsupport/(.*)$ https://$host/howtogeneral/support/$1 permanent;
    }

    # Move apidocs to new url
    location = /apidocs/ {
      rewrite ^/(.*)/$ https://$host/apidocs-mxsdk/apidocs/ redirect;
    }

    location / {
      rewrite ^(.*/)\index(\?.*)?$ $1$2 permanent;
      try_files $uri/index.html $uri.html $uri/ $uri =404;
    }

    # Expiration for attachments set to 1 year
    location ~ /attachments/ {
      expires 1y;
      try_files $uri/index.html $uri.html $uri/ $uri =404;
    }

    # ATS Rewrites (renamed to lowercase)
    location ~ ^/ATS/ {
      rewrite ^/ATS/(.*)$ https://$host/ats/$1 redirect;
    }

    # Expiration for menu jsons set to 1 hour
    location /json/ {
      expires 1h;
      try_files $uri/index.html $uri.html $uri/ $uri =404;
    }

    # Expiration set for assets to 1 month (TODO: could be longer due to cache string)
    location /public/ {
      expires 1M;
      try_files $uri/index.html $uri.html $uri/ $uri =404;
    }

    location /mappings/ {
      deny all;
      return 404;
    }
  }
}
